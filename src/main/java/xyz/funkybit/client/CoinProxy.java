package xyz.funkybit.client;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class CoinProxy extends Contract {
    public static final String BINARY = "60a06040523060805234801561001457600080fd5b50608051612ff461003e600039600081816118390152818161186201526119a80152612ff46000f3fe6080604052600436106101405760003560e01c806365e17c9d116100b6578063c23f001f1161006f578063c23f001f1461038f578063cf8492b0146103c4578063d1e32f67146103e4578063e791cb24146103f9578063f2fde38b1461040f578063ff5cf51e1461042f57600080fd5b806365e17c9d1461027f578063715018a6146102b757806384b0196e146102cc5780638da5cb5b146102f45780638dc45d9a14610331578063ad3cb1cc1461035157600080fd5b8063485cc95511610108578063485cc955146101e15780634a34d434146102015780634b023cf8146102175780634f1ef2861461023757806352d1902d1461024a5780635a91f7431461025f57600080fd5b80630d8e6e2c1461014557806324a9b8061461016657806330176c861461018857806335944787146101a85780633644e515146101cc575b600080fd5b34801561015157600080fd5b50604051600181526020015b60405180910390f35b34801561017257600080fd5b50610186610181366004612256565b61044f565b005b34801561019457600080fd5b506101866101a3366004612256565b6108ec565b3480156101b457600080fd5b506101be60055481565b60405190815260200161015d565b3480156101d857600080fd5b506101be610e9a565b3480156101ed57600080fd5b506101866101fc3660046122e3565b610ea9565b34801561020d57600080fd5b506101be60035481565b34801561022357600080fd5b50610186610232366004612316565b611037565b610186610245366004612427565b6110ad565b34801561025657600080fd5b506101be6110cc565b34801561026b57600080fd5b5061018661027a366004612316565b6110e9565b34801561028b57600080fd5b5060025461029f906001600160a01b031681565b6040516001600160a01b03909116815260200161015d565b3480156102c357600080fd5b5061018661115f565b3480156102d857600080fd5b506102e1611173565b60405161015d979695949392919061251c565b34801561030057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661029f565b34801561033d57600080fd5b5060015461029f906001600160a01b031681565b34801561035d57600080fd5b50610382604051806040016040528060058152602001640352e302e360dc1b81525081565b60405161015d91906125b5565b34801561039b57600080fd5b506101be6103aa3660046122e3565b600060208181529281526040808220909352908152205481565b3480156103d057600080fd5b506101866103df366004612256565b61121f565b3480156103f057600080fd5b5061018661162e565b34801561040557600080fd5b506101be60045481565b34801561041b57600080fd5b5061018661042a366004612316565b61165f565b34801561043b57600080fd5b5061018661044a366004612256565b61169d565b6001546001600160a01b031633146104825760405162461bcd60e51b8152600401610479906125c8565b60405180910390fd5b600354156104e05760405162461bcd60e51b815260206004820152602560248201527f426174636820696e2070726f67726573732c207375626d6974206f7220726f6c6044820152646c6261636b60d81b6064820152608401610479565b600160006104f0838501856128dd565b602081015151815151919250146105595760405162461bcd60e51b815260206004820152602760248201527f496e76616c6964206164647265737320616e64207472616465206c69737473206044820152666c656e6774687360c81b6064820152608401610479565b60005b8160400151518163ffffffff1610156108c257600082604001518263ffffffff168151811061058d5761058d6129eb565b6020026020010151606001519050600083604001518363ffffffff16815181106105b9576105b96129eb565b602002602001015160000151905060005b84604001518463ffffffff16815181106105e6576105e66129eb565b602002602001015160200151518163ffffffff16101561066a5784604001518463ffffffff168151811061061c5761061c6129eb565b6020026020010151602001518163ffffffff168151811061063f5761063f6129eb565b602002602001015160200151836106569190612a17565b92508061066281612a3f565b9150506105ca565b5060005b84604001518463ffffffff168151811061068a5761068a6129eb565b602002602001015160400151518163ffffffff16101561085957600085604001518563ffffffff16815181106106c2576106c26129eb565b6020026020010151604001518263ffffffff16815181106106e5576106e56129eb565b602002602001015160200151905080846106ff9190612a62565b9350600086604001518663ffffffff168151811061071f5761071f6129eb565b6020026020010151604001518363ffffffff1681518110610742576107426129eb565b60200260200101516000015161ffff169050600087600001518263ffffffff1681518110610772576107726129eb565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928a16825291909352909120549091508311156108435760009850806001600160a01b03167ffd9ca98a19582277369a1bd07c1b0d8d47ca8ca730a2ef34c6617c4453c3570a868a602001518563ffffffff16815181106107f9576107f96129eb565b602090810291909101810151516001600160a01b0380871660009081528084526040808220928d168252919093529182902054915161083a93928991612ac5565b60405180910390a25b505050808061085190612a3f565b91505061066e565b5081156108ad5783604001518363ffffffff168151811061087c5761087c6129eb565b6020908102919091010151516040516337f855c760e01b81526001600160a01b039091166004820152602401610479565b505080806108ba90612a3f565b91505061055c565b5081156108e65783836040516108d9929190612afc565b6040519081900390206003555b50505050565b6001546001600160a01b031633146109165760405162461bcd60e51b8152600401610479906125c8565b60035460000361095c5760405162461bcd60e51b8152602060048201526011602482015270139bc818985d18da081c1c995c185c9959607a1b6044820152606401610479565b818160405161096c929190612afc565b6040518091039020600354146109cf5760405162461bcd60e51b815260206004820152602260248201527f4861736820646f6573206e6f74206d61746368207072657061726564206261746044820152610c6d60f31b6064820152608401610479565b60006109dd828401846128dd565b905060005b8160400151518163ffffffff161015610dd757600082604001518263ffffffff1681518110610a1357610a136129eb565b602002602001015160000151905060005b83604001518363ffffffff1681518110610a4057610a406129eb565b602002602001015160200151518163ffffffff161015610b6e57600084604001518463ffffffff1681518110610a7857610a786129eb565b6020026020010151602001518263ffffffff1681518110610a9b57610a9b6129eb565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610acc57610acc6129eb565b6020026020010151602001518463ffffffff1681518110610aef57610aef6129eb565b60200260200101516000015161ffff1681518110610b0f57610b0f6129eb565b6020908102919091018101516001600160a01b03808216600090815280845260408082209289168252919093528220805491935084929091610b52908490612b0c565b9250508190555050508080610b6690612a3f565b915050610a24565b5060005b83604001518363ffffffff1681518110610b8e57610b8e6129eb565b602002602001015160400151518163ffffffff161015610d2b57600084604001518463ffffffff1681518110610bc657610bc66129eb565b6020026020010151604001518263ffffffff1681518110610be957610be96129eb565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610c1a57610c1a6129eb565b6020026020010151604001518463ffffffff1681518110610c3d57610c3d6129eb565b60200260200101516000015161ffff1681518110610c5d57610c5d6129eb565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928916825291909352909120549091508211610cd7576001600160a01b0380821660009081526020818152604080832093881683529290529081208054849290610ccc908490612b1f565b90915550610d169050565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b6044820152606401610479565b50508080610d2390612a3f565b915050610b72565b5082604001518263ffffffff1681518110610d4857610d486129eb565b602002602001015160600151600014610dc45782604001518263ffffffff1681518110610d7757610d776129eb565b602090810291909101810151606001516002546001600160a01b03908116600090815280845260408082209286168252919093528220805491929091610dbe908490612b0c565b90915550505b5080610dcf81612a3f565b9150506109e2565b5060005b8160200151518163ffffffff161015610e89578151805163ffffffff8316908110610e0857610e086129eb565b60200260200101516001600160a01b03167f8371f930fec32c9b3def9889038e3a93c3df73bc83aa9e6c01c806a70b2cce1783602001518363ffffffff1681518110610e5657610e566129eb565b602002602001015160000151604051610e6f9190612b32565b60405180910390a280610e8181612a3f565b915050610ddb565b505060038054600455600090555050565b6000610ea461179e565b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610eee5750825b90506000826001600160401b03166001148015610f0a5750303b155b905081158015610f18575080155b15610f365760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610f6057845460ff60401b1916600160401b1785555b610f69336117a8565b610f716117b9565b610fb860405180604001604052806008815260200167199d5b9ade589a5d60c21b815250604051806040016040528060058152602001640302e312e360dc1b8152506117c1565b600180546001600160a01b03808a166001600160a01b0319928316179092556002805492891692909116919091179055831561102e57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b61103f6117d3565b6001600160a01b03811661108b5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610479565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6110b561182e565b6110be826118d3565b6110c882826118db565b5050565b60006110d661199d565b50600080516020612f9f83398151915290565b6110f16117d3565b6001600160a01b03811661113d5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610479565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6111676117d3565b61117160006119e6565b565b60006060808280808381600080516020612f7f83398151915280549091501580156111a057506001810154155b6111e45760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610479565b6111ec611a57565b6111f4611b1a565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b6001546001600160a01b031633146112495760405162461bcd60e51b8152600401610479906125c8565b600354156112995760405162461bcd60e51b815260206004820152601c60248201527f536574746c656d656e7420626174636820696e2070726f6772657373000000006044820152606401610479565b81816040516112a9929190612afc565b6040518091039020600554036113015760405162461bcd60e51b815260206004820152601c60248201527f4d617463686573206c6173742062617463682070726f636573736564000000006044820152606401610479565b600061130f82840184612c0c565b905060008160200151511180611326575080515115155b6113835760405162461bcd60e51b815260206004820152602860248201527f4d757374206265206174206c656173742031206465706f736974206f722077696044820152671d1a191c985dd85b60c21b6064820152608401610479565b60005b8151518110156115415781518051829081106113a4576113a46129eb565b602002602001015160600151600080846000015184815181106113c9576113c96129eb565b6020026020010151602001516001600160a01b03166001600160a01b0316815260200190815260200160002060008460000151848151811061140d5761140d6129eb565b6020026020010151604001516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546114489190612b0c565b90915550508151805182908110611461576114616129eb565b6020026020010151602001516001600160a01b03167f6fafbc6e0b9ef6222d4158c559aa986977b82bdf6e200b790d729212aca936ee836000015183815181106114ad576114ad6129eb565b602002602001015160000151846000015184815181106114cf576114cf6129eb565b602002602001015160400151856000015185815181106114f1576114f16129eb565b602002602001015160600151604051611531939291906001600160401b039390931683526001600160a01b03919091166020830152604082015260600190565b60405180910390a2600101611386565b5060005b81602001515181101561160c576116048260200151828151811061156b5761156b6129eb565b6020026020010151606001518360200151838151811061158d5761158d6129eb565b602002602001015160000151846020015184815181106115af576115af6129eb565b602002602001015160200151856020015185815181106115d1576115d16129eb565b602002602001015160400151866020015186815181106115f3576115f36129eb565b602002602001015160800151611b59565b600101611545565b50828260405161161d929190612afc565b604051908190039020600555505050565b6001546001600160a01b031633146116585760405162461bcd60e51b8152600401610479906125c8565b6000600355565b6116676117d3565b6001600160a01b03811661169157604051631e4fbdf760e01b815260006004820152602401610479565b61169a816119e6565b50565b6001546001600160a01b031633146116c75760405162461bcd60e51b8152600401610479906125c8565b60006116d582840184612d41565b905060005b8151518110156108e657611796826000015182815181106116fd576116fd6129eb565b6020026020010151606001518360000151838151811061171f5761171f6129eb565b60200260200101516000015184600001518481518110611741576117416129eb565b60200260200101516020015185600001518581518110611763576117636129eb565b60200260200101516040015186600001518681518110611785576117856129eb565b602002602001015160800151611d7e565b6001016116da565b6000610ea4611ea8565b6117b0611f1c565b61169a81611f65565b611171611f1c565b6117c9611f1c565b6110c88282611f6d565b336118057f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146111715760405163118cdaa760e01b8152336004820152602401610479565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806118b557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118a9600080516020612f9f833981519152546001600160a01b031690565b6001600160a01b031614155b156111715760405163703e46dd60e11b815260040160405180910390fd5b61169a6117d3565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611935575060408051601f3d908101601f1916820190925261193291810190612dad565b60015b61195d57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610479565b600080516020612f9f833981519152811461198e57604051632a87526960e21b815260048101829052602401610479565b6119988383611fce565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111715760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1028054606091600080516020612f7f83398151915291611a9690612dc6565b80601f0160208091040260200160405190810160405280929190818152602001828054611ac290612dc6565b8015611b0f5780601f10611ae457610100808354040283529160200191611b0f565b820191906000526020600020905b815481529060010190602001808311611af257829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1038054606091600080516020612f7f83398151915291611a9690612dc6565b6001600160a01b038085166000908152602081815260408083209387168352929052205480831115611bd457846001600160a01b03167fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b2878686856000604051611bc7959493929190612e00565b60405180910390a2611d75565b600082118015611bec57506001600160a01b03841615155b15611ca4576001600160a01b03851660009081526020818152604080832083805290915290205480831115611c6c57856001600160a01b03167fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b2888786856001604051611c5d959493929190612e00565b60405180910390a25050611d77565b6001600160a01b03861660009081526020818152604080832083805290915281208054859290611c9d908490612b1f565b9091555050505b6001600160a01b0380861660009081526020818152604080832093881683529290529081208054859290611cd9908490612b1f565b90915550506002546001600160a01b031660009081526020818152604080832083805290915281208054849290611d11908490612b0c565b9091555050604080516001600160401b03881681526001600160a01b03868116602083015291810185905260608101849052908616907fa5aa877e80b28edb44f455cac4bce0ca04071bd2b41519486ad20e027c1135f29060800160405180910390a25b505b5050505050565b6001600160a01b0380851660009081526020818152604080832093871683529290529081208054849290611db3908490612b0c565b90915550508015801590611dcf57506001600160a01b03831615155b15611e0b576001600160a01b03841660009081526020818152604080832083805290915281208054839290611e05908490612b0c565b90915550505b6002546001600160a01b031660009081526020818152604080832083805290915281208054839290611e3e908490612b1f565b9091555050604080516001600160401b03871681526001600160a01b03858116602083015291810184905260608101839052908516907f07c38d054c687f7f6ecb195e13d2f1c0a8c99945bf7aa66349e623e5d6cd15a09060800160405180910390a25050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611ed3612024565b611edb61208e565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661117157604051631afcd79f60e31b815260040160405180910390fd5b611667611f1c565b611f75611f1c565b600080516020612f7f8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102611faf8482612ea3565b5060038101611fbe8382612ea3565b5060008082556001909101555050565b611fd7826120d2565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561201c576119988282612137565b6110c86121af565b6000600080516020612f7f8339815191528161203e611a57565b80519091501561205657805160209091012092915050565b81548015612065579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b6000600080516020612f7f833981519152816120a8611b1a565b8051909150156120c057805160209091012092915050565b60018201548015612065579392505050565b806001600160a01b03163b60000361210857604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610479565b600080516020612f9f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516121549190612f62565b600060405180830381855af49150503d806000811461218f576040519150601f19603f3d011682016040523d82523d6000602084013e612194565b606091505b50915091506121a48583836121ce565b925050505b92915050565b34156111715760405163b398979f60e01b815260040160405180910390fd5b6060826121e3576121de8261222d565b612226565b81511580156121fa57506001600160a01b0384163b155b1561222357604051639996b31560e01b81526001600160a01b0385166004820152602401610479565b50805b9392505050565b80511561223d5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000806020838503121561226957600080fd5b82356001600160401b038082111561228057600080fd5b818501915085601f83011261229457600080fd5b8135818111156122a357600080fd5b8660208285010111156122b557600080fd5b60209290920196919550909350505050565b80356001600160a01b03811681146122de57600080fd5b919050565b600080604083850312156122f657600080fd5b6122ff836122c7565b915061230d602084016122c7565b90509250929050565b60006020828403121561232857600080fd5b612226826122c7565b634e487b7160e01b600052604160045260246000fd5b604051602081016001600160401b038111828210171561236957612369612331565b60405290565b604080519081016001600160401b038111828210171561236957612369612331565b604051608081016001600160401b038111828210171561236957612369612331565b604051606081016001600160401b038111828210171561236957612369612331565b60405160a081016001600160401b038111828210171561236957612369612331565b604051601f8201601f191681016001600160401b038111828210171561241f5761241f612331565b604052919050565b6000806040838503121561243a57600080fd5b612443836122c7565b91506020808401356001600160401b038082111561246057600080fd5b818601915086601f83011261247457600080fd5b81358181111561248657612486612331565b612498601f8201601f191685016123f7565b915080825287848285010111156124ae57600080fd5b80848401858401376000848284010152508093505050509250929050565b60005b838110156124e75781810151838201526020016124cf565b50506000910152565b600081518084526125088160208601602086016124cc565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e0602084015261253d60e084018a6124f0565b838103604085015261254f818a6124f0565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156125a357835183529284019291840191600101612587565b50909c9b505050505050505050505050565b60208152600061222660208301846124f0565b6020808252601b908201527f53656e646572206973206e6f7420746865207375626d69747465720000000000604082015260600190565b60006001600160401b0382111561261857612618612331565b5060051b60200190565b600082601f83011261263357600080fd5b81356020612648612643836125ff565b6123f7565b828152600592831b850182019282820191908785111561266757600080fd5b8387015b858110156127375780356001600160401b038082111561268b5760008081fd5b90890190818b03601f19018713156126a35760008081fd5b6126ab612347565b87830135828111156126bd5760008081fd5b8084019350508b603f8401126126d557600091508182fd5b87830135915060406126e9612643846125ff565b83815292861b8401810192898101908e8511156127065760008081fd5b948201945b848610156127245785358252948a0194908a019061270b565b835250508652505092840192840161266b565b5090979650505050505050565b600082601f83011261275557600080fd5b81356020612765612643836125ff565b82815260069290921b8401810191818101908684111561278457600080fd5b8286015b848110156127d457604081890312156127a15760008081fd5b6127a961236f565b813561ffff811681146127bc5760008081fd5b81528185013585820152835291830191604001612788565b509695505050505050565b600082601f8301126127f057600080fd5b81356020612800612643836125ff565b82815260059290921b8401810191818101908684111561281f57600080fd5b8286015b848110156127d45780356001600160401b03808211156128435760008081fd5b908801906080828b03601f190181131561285d5760008081fd5b612865612391565b6128708885016122c7565b8152604080850135848111156128865760008081fd5b6128948e8b83890101612744565b8a84015250606080860135858111156128ad5760008081fd5b6128bb8f8c838a0101612744565b9284019290925294909201359381019390935250508352918301918301612823565b600060208083850312156128f057600080fd5b82356001600160401b038082111561290757600080fd5b908401906060828703121561291b57600080fd5b6129236123b3565b82358281111561293257600080fd5b8301601f8101881361294357600080fd5b8035612951612643826125ff565b81815260059190911b8201860190868101908a83111561297057600080fd5b928701925b8284101561299557612986846122c7565b82529287019290870190612975565b845250505082840135828111156129ab57600080fd5b6129b788828601612622565b858301525060408301359350818411156129d057600080fd5b6129dc878585016127df565b60408201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018281126000831280158216821582161715612a3757612a37612a01565b505092915050565b600063ffffffff808316818103612a5857612a58612a01565b6001019392505050565b8181036000831280158383131683831282161715612a8257612a82612a01565b5092915050565b60008151808452602080850194506020840160005b83811015612aba57815187529582019590820190600101612a9e565b509495945050505050565b6001600160a01b0385168152608060208201819052600090612ae990830186612a89565b6040830194909452506060015292915050565b8183823760009101908152919050565b808201808211156121a9576121a9612a01565b818103818111156121a9576121a9612a01565b6020815260006122266020830184612a89565b80356001600160401b03811681146122de57600080fd5b600082601f830112612b6d57600080fd5b81356020612b7d612643836125ff565b82815260a09283028501820192828201919087851115612b9c57600080fd5b8387015b858110156127375781818a031215612bb85760008081fd5b612bc06123d5565b612bc9826122c7565b8152612bd68683016122c7565b81870152604082810135908201526060612bf1818401612b45565b90820152608082810135908201528452928401928101612ba0565b60006020808385031215612c1f57600080fd5b82356001600160401b0380821115612c3657600080fd5b81850191506040808388031215612c4c57600080fd5b612c5461236f565b833583811115612c6357600080fd5b8401601f81018913612c7457600080fd5b8035612c82612643826125ff565b81815260079190911b8201870190878101908b831115612ca157600080fd5b928801925b82841015612d0b576080848d031215612cbf5760008081fd5b612cc7612391565b612cd085612b45565b8152612cdd8a86016122c7565b8a820152612cec8786016122c7565b8188015260608581013590820152825260809093019290880190612ca6565b845250505083850135915082821115612d2357600080fd5b612d2f88838601612b5c565b85820152809550505050505092915050565b600060208284031215612d5357600080fd5b81356001600160401b0380821115612d6a57600080fd5b9083019060208286031215612d7e57600080fd5b612d86612347565b823582811115612d9557600080fd5b612da187828601612b5c565b82525095945050505050565b600060208284031215612dbf57600080fd5b5051919050565b600181811c90821680612dda57607f821691505b602082108103612dfa57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160401b03861681526001600160a01b0385166020820152604081018490526060810183905260a0810160028310612e4b57634e487b7160e01b600052602160045260246000fd5b8260808301529695505050505050565b601f821115611998576000816000526020600020601f850160051c81016020861015612e845750805b601f850160051c820191505b81811015611d7557828155600101612e90565b81516001600160401b03811115612ebc57612ebc612331565b612ed081612eca8454612dc6565b84612e5b565b602080601f831160018114612f055760008415612eed5750858301515b600019600386901b1c1916600185901b178555611d75565b600085815260208120601f198616915b82811015612f3457888601518255948401946001909101908401612f15565b5085821015612f525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251612f748184602087016124cc565b919091019291505056fea16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220ae35453caa94420c9dc10e3222a377b0e030d45e42f0436182f4b8f9fec4c6be64736f6c63430008180033";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_BATCHHASH = "batchHash";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FEEACCOUNT = "feeAccount";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_LASTDEPOSITANDWITHDRAWBATCHHASH = "lastDepositAndWithdrawBatchHash";

    public static final String FUNC_LASTSETTLEMENTBATCHHASH = "lastSettlementBatchHash";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PREPARESETTLEMENTBATCH = "prepareSettlementBatch";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROLLBACKBATCH = "rollbackBatch";

    public static final String FUNC_ROLLBACKWITHDRAWALBATCH = "rollbackWithdrawalBatch";

    public static final String FUNC_SETFEEACCOUNT = "setFeeAccount";

    public static final String FUNC_SETSUBMITTER = "setSubmitter";

    public static final String FUNC_SUBMITDEPOSITANDWITHDRAWALBATCH = "submitDepositAndWithdrawalBatch";

    public static final String FUNC_SUBMITSETTLEMENTBATCH = "submitSettlementBatch";

    public static final String FUNC_SUBMITTER = "submitter";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event DEPOSITSUCCEEDED_EVENT = new Event("DepositSucceeded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETTLEMENTCOMPLETED_EVENT = new Event("SettlementCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event SETTLEMENTFAILED_EVENT = new Event("SettlementFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWALFAILED_EVENT = new Event("WithdrawalFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event WITHDRAWALROLLEDBACK_EVENT = new Event("WithdrawalRolledBack", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALSUCCEEDED_EVENT = new Event("WithdrawalSucceeded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected CoinProxy(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CoinProxy(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CoinProxy(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CoinProxy(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balances(String param0, String param1) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new Address(160, param0),
                new Address(160, param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> batchHash() {
        final Function function = new Function(FUNC_BATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> feeAccount() {
        final Function function = new Function(FUNC_FEEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getVersion() {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _submitter, String _feeAccount) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(160, _submitter),
                new Address(160, _feeAccount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> lastDepositAndWithdrawBatchHash() {
        final Function function = new Function(FUNC_LASTDEPOSITANDWITHDRAWBATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> lastSettlementBatchHash() {
        final Function function = new Function(FUNC_LASTSETTLEMENTBATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_PREPARESETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rollbackBatch() {
        final Function function = new Function(
                FUNC_ROLLBACKBATCH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rollbackWithdrawalBatch(byte[] data) {
        final Function function = new Function(
                FUNC_ROLLBACKWITHDRAWALBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeAccount(String _feeAccount) {
        final Function function = new Function(
                FUNC_SETFEEACCOUNT, 
                Arrays.<Type>asList(new Address(160, _feeAccount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubmitter(String _submitter) {
        final Function function = new Function(
                FUNC_SETSUBMITTER, 
                Arrays.<Type>asList(new Address(160, _submitter)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitDepositAndWithdrawalBatch(byte[] data) {
        final Function function = new Function(
                FUNC_SUBMITDEPOSITANDWITHDRAWALBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_SUBMITSETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> submitter() {
        final Function function = new Function(FUNC_SUBMITTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new Address(160, newImplementation),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public static List<DepositSucceededEventResponse> getDepositSucceededEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSITSUCCEEDED_EVENT, transactionReceipt);
        ArrayList<DepositSucceededEventResponse> responses = new ArrayList<DepositSucceededEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DepositSucceededEventResponse typedResponse = new DepositSucceededEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DepositSucceededEventResponse getDepositSucceededEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSITSUCCEEDED_EVENT, log);
        DepositSucceededEventResponse typedResponse = new DepositSucceededEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<DepositSucceededEventResponse> depositSucceededEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDepositSucceededEventFromLog(log));
    }

    public Flowable<DepositSucceededEventResponse> depositSucceededEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITSUCCEEDED_EVENT));
        return depositSucceededEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<SettlementCompletedEventResponse> getSettlementCompletedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, transactionReceipt);
        ArrayList<SettlementCompletedEventResponse> responses = new ArrayList<SettlementCompletedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementCompletedEventResponse getSettlementCompletedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, log);
        SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementCompletedEventFromLog(log));
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTCOMPLETED_EVENT));
        return settlementCompletedEventFlowable(filter);
    }

    public static List<SettlementFailedEventResponse> getSettlementFailedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, transactionReceipt);
        ArrayList<SettlementFailedEventResponse> responses = new ArrayList<SettlementFailedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            typedResponse.requestedAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementFailedEventResponse getSettlementFailedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, log);
        SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        typedResponse.requestedAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementFailedEventFromLog(log));
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTFAILED_EVENT));
        return settlementFailedEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<WithdrawalFailedEventResponse> getWithdrawalFailedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, transactionReceipt);
        ArrayList<WithdrawalFailedEventResponse> responses = new ArrayList<WithdrawalFailedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalFailedEventResponse getWithdrawalFailedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, log);
        WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalFailedEventFromLog(log));
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALFAILED_EVENT));
        return withdrawalFailedEventFlowable(filter);
    }

    public static List<WithdrawalRolledBackEventResponse> getWithdrawalRolledBackEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALROLLEDBACK_EVENT, transactionReceipt);
        ArrayList<WithdrawalRolledBackEventResponse> responses = new ArrayList<WithdrawalRolledBackEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawalRolledBackEventResponse typedResponse = new WithdrawalRolledBackEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalRolledBackEventResponse getWithdrawalRolledBackEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALROLLEDBACK_EVENT, log);
        WithdrawalRolledBackEventResponse typedResponse = new WithdrawalRolledBackEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalRolledBackEventResponse> withdrawalRolledBackEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalRolledBackEventFromLog(log));
    }

    public Flowable<WithdrawalRolledBackEventResponse> withdrawalRolledBackEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALROLLEDBACK_EVENT));
        return withdrawalRolledBackEventFlowable(filter);
    }

    public static List<WithdrawalSucceededEventResponse> getWithdrawalSucceededEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALSUCCEEDED_EVENT, transactionReceipt);
        ArrayList<WithdrawalSucceededEventResponse> responses = new ArrayList<WithdrawalSucceededEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawalSucceededEventResponse typedResponse = new WithdrawalSucceededEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalSucceededEventResponse getWithdrawalSucceededEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALSUCCEEDED_EVENT, log);
        WithdrawalSucceededEventResponse typedResponse = new WithdrawalSucceededEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalSucceededEventResponse> withdrawalSucceededEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalSucceededEventFromLog(log));
    }

    public Flowable<WithdrawalSucceededEventResponse> withdrawalSucceededEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALSUCCEEDED_EVENT));
        return withdrawalSucceededEventFlowable(filter);
    }

    @Deprecated
    public static CoinProxy load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CoinProxy(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CoinProxy load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CoinProxy(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CoinProxy load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CoinProxy(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CoinProxy load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CoinProxy(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CoinProxy> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CoinProxy.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CoinProxy> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CoinProxy.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CoinProxy> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CoinProxy.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CoinProxy> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CoinProxy.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class DepositSucceededEventResponse extends BaseEventResponse {
        public String from;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SettlementCompletedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;
    }

    public static class SettlementFailedEventResponse extends BaseEventResponse {
        public String _address;

        public String token;

        public List<byte[]> tradeHashes;

        public BigInteger requestedAmount;

        public BigInteger balance;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class WithdrawalFailedEventResponse extends BaseEventResponse {
        public String _address;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;

        public BigInteger balance;

        public BigInteger errorCode;
    }

    public static class WithdrawalRolledBackEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;

        public BigInteger fee;
    }

    public static class WithdrawalSucceededEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;

        public BigInteger fee;
    }
}
